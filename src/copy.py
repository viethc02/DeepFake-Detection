# -*- coding: utf-8 -*-
"""copy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XlBYmmB-GE9zW-OhA4cMA0XCO856uyNF
"""

# from google.colab import drive
# drive.mount('/content/drive')

# import os
# os.chdir('drive/MyDrive/Colab Notebooks/DeepFake')

test = open('data/test.json', 'r')
print(test)

import json
import shutil
import os.path
list_test = open('data/CELEB-DF/List_of_testing_videos.txt', 'r')
for line in list_test:
    line = line.strip()
    file_path = 'data/CELEB-DF/' + line[2:]
    list_file_path =  file_path.split('/')
    list_file_path[2] = list_file_path[2] + '_cropped'
    file_path = '/'.join(list_file_path)
    test_path = 'data/CELEB-DF/CELEB-test/' + file_path.split('/')[3]
    print(file_path)
    print(test_path)
    print(os.getcwd())
    if os.path.exists(file_path):
        print(1)
        shutil.copy(file_path, test_path)

import glob
all_videos = glob.glob('data/CELEB-DF/Celeb-real_cropped/*.mp4') + glob.glob('data/CELEB-DF/YouTube-real_cropped/*.mp4') + glob.glob('data/CELEB-DF/Celeb-synthesis_cropped/*.mp4')
dem = 1
for line in all_videos:
    file_path = line
    train_path = 'data/CELEB-DF/CELEB-train/' + file_path.split('/')[3]
    test_path = 'data/CELEB-DF/CELEB-test/' + file_path.split('/')[3]
    print(file_path)
    print(test_path)
    if os.path.exists(test_path):
        print(dem)
        dem = dem + 1
        continue
    print(file_path)
    shutil.copy(file_path, train_path)

import json
import shutil
import os.path

with open('data/test.json') as f:
    d = json.load(f)
    #print(d)
    for fr in d:
      print(fr)
      real = fr[1]
      fake = fr[0]
      real_path = f'data/real_videos/origin{real}.mp4'
      fake_path1 = f'data/Fake_videos/Deepfakes{real}_{fake}.mp4'
      fake_path2 = f'data/Fake_videos/Face2Face{real}_{fake}.mp4'
      fake_path3 = f'data/Fake_videos/FaceShifter{real}_{fake}.mp4'
      fake_path4 = f'data/Fake_videos/FaceSwap{real}_{fake}.mp4'
      fake_path5 = f'data/Fake_videos/NeuralTextures{real}_{fake}.mp4'
      new_fake_path1 = f'data/FF_test/Deepfakes{real}_{fake}.mp4'
      new_fake_path2 = f'data/FF_test/Face2Face{real}_{fake}.mp4'
      new_fake_path3 = f'data/FF_test/FaceShifter{real}_{fake}.mp4'
      new_fake_path4 = f'data/FF_test/FaceSwap{real}_{fake}.mp4'
      new_fake_path5 = f'data/FF_test/NeuralTextures{real}_{fake}.mp4'
      new_real_path = f'data/FF_test/origin{real}.mp4'
      if os.path.exists(real_path):
          shutil.copy(real_path, new_real_path)
      if os.path.exists(fake_path1):
          shutil.copy(fake_path1, new_fake_path1)
      if os.path.exists(fake_path2):
          shutil.copy(fake_path2, new_fake_path2)
      if os.path.exists(fake_path3):
          shutil.copy(fake_path3, new_fake_path3)
      if os.path.exists(fake_path4):
          shutil.copy(fake_path4, new_fake_path4)
      if os.path.exists(fake_path5):
          shutil.copy(fake_path5, new_fake_path5)
      #break

import glob
print(len(glob.glob('data/FF_test/*.mp4')))

import json
import shutil
import os.path

with open('data/val.json') as f:
    d = json.load(f)
    #print(d)
    for fr in d:
      print(fr)
      real = fr[1]
      fake = fr[0]
      real_path = f'data/real_videos/origin{real}.mp4'
      fake_path1 = f'data/Fake_videos/Deepfakes{real}_{fake}.mp4'
      fake_path2 = f'data/Fake_videos/Face2Face{real}_{fake}.mp4'
      fake_path3 = f'data/Fake_videos/FaceShifter{real}_{fake}.mp4'
      fake_path4 = f'data/Fake_videos/FaceSwap{real}_{fake}.mp4'
      fake_path5 = f'data/Fake_videos/NeuralTextures{real}_{fake}.mp4'
      new_fake_path1 = f'data/FF_val/Deepfakes{real}_{fake}.mp4'
      new_fake_path2 = f'data/FF_val/Face2Face{real}_{fake}.mp4'
      new_fake_path3 = f'data/FF_val/FaceShifter{real}_{fake}.mp4'
      new_fake_path4 = f'data/FF_val/FaceSwap{real}_{fake}.mp4'
      new_fake_path5 = f'data/FF_val/NeuralTextures{real}_{fake}.mp4'
      new_real_path = f'data/FF_val/origin{real}.mp4'
      if os.path.exists(real_path):
          shutil.copy(real_path, new_real_path)
      if os.path.exists(fake_path1):
          shutil.copy(fake_path1, new_fake_path1)
      if os.path.exists(fake_path2):
          shutil.copy(fake_path2, new_fake_path2)
      if os.path.exists(fake_path3):
          shutil.copy(fake_path3, new_fake_path3)
      if os.path.exists(fake_path4):
          shutil.copy(fake_path4, new_fake_path4)
      if os.path.exists(fake_path5):
          shutil.copy(fake_path5, new_fake_path5)
      #break

import glob
print(len(glob.glob('data/FF_val/*.mp4')))

import json
import shutil
import os.path

with open('data/train.json') as f:
    d = json.load(f)
    #print(d)
    for fr in d:
      print(fr)
      real = fr[1]
      fake = fr[0]
      real_path = f'data/real_videos/origin{real}.mp4'
      fake_path1 = f'data/Fake_videos/Deepfakes{real}_{fake}.mp4'
      fake_path2 = f'data/Fake_videos/Face2Face{real}_{fake}.mp4'
      fake_path3 = f'data/Fake_videos/FaceShifter{real}_{fake}.mp4'
      fake_path4 = f'data/Fake_videos/FaceSwap{real}_{fake}.mp4'
      fake_path5 = f'data/Fake_videos/NeuralTextures{real}_{fake}.mp4'
      new_fake_path1 = f'data/FF_train/Deepfakes{real}_{fake}.mp4'
      new_fake_path2 = f'data/FF_train/Face2Face{real}_{fake}.mp4'
      new_fake_path3 = f'data/FF_train/FaceShifter{real}_{fake}.mp4'
      new_fake_path4 = f'data/FF_train/FaceSwap{real}_{fake}.mp4'
      new_fake_path5 = f'data/FF_train/NeuralTextures{real}_{fake}.mp4'
      new_real_path = f'data/FF_train/origin{real}.mp4'
      if os.path.exists(real_path):
          shutil.copy(real_path, new_real_path)
      if os.path.exists(fake_path1):
          shutil.copy(fake_path1, new_fake_path1)
      if os.path.exists(fake_path2):
          shutil.copy(fake_path2, new_fake_path2)
      if os.path.exists(fake_path3):
          shutil.copy(fake_path3, new_fake_path3)
      if os.path.exists(fake_path4):
          shutil.copy(fake_path4, new_fake_path4)
      if os.path.exists(fake_path5):
          shutil.copy(fake_path5, new_fake_path5)
      #break

import glob
print(len(glob.glob('data/FF_train/*.mp4')))

